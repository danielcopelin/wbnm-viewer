# -*- coding: utf-8 -*-
"""
/***************************************************************************
 WBNMViewer
                                 A QGIS plugin
 View and analyse WBNM hydrology model results
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2020-09-04
        git sha              : $Format:%H$
        copyright            : (C) 2020 by Dan Copelin
        email                : danielcopelin@gmail.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
from qgis.PyQt.QtCore import QSettings, QTranslator, QCoreApplication, Qt
from qgis.PyQt.QtGui import QIcon
from qgis.PyQt.QtWidgets import (
    QAction,
    QFileDialog,
    QProgressBar,
    QVBoxLayout,
    QWidget,
    QMenuBar,
)
from qgis.core import Qgis
from qgis.gui import QgsMessageBar

from matplotlib.backends.backend_qt5agg import (
    FigureCanvasQTAgg as FigureCanvas,
    NavigationToolbar2QT as NavigationToolbar,
)
import fnmatch

# Initialize Qt resources from file resources.py
from .resources import *

# Import the code for the DockWidget
from .wbnm_viewer_dockwidget import WBNMViewerDockWidget
import os.path

from .wbnm_plot import single_hydrograph, box_plot, ensembles, update_plot
from .wbnm_results_parser import get_hydrographs, get_peaks
from .data_frame_model import DataFrameModel


class WBNMViewer:
    """QGIS Plugin Implementation."""

    def __init__(self, iface):
        """Constructor.

        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        # Save reference to the QGIS interface
        self.iface = iface

        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)

        # initialize locale
        locale = QSettings().value("locale/userLocale")[0:2]
        locale_path = os.path.join(
            self.plugin_dir, "i18n", "WBNMViewer_{}.qm".format(locale)
        )

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)
            QCoreApplication.installTranslator(self.translator)

        # Declare instance attributes
        self.actions = []
        self.menu = self.tr(u"&WBNM Viewer")
        # TODO: We are going to let the user set this up in a future iteration
        self.toolbar = self.iface.addToolBar(u"WBNMViewer")
        self.toolbar.setObjectName(u"WBNMViewer")

        # print "** INITIALIZING WBNMViewer"
        self.pluginIsActive = False
        self.dockwidget = None

        # store processed data
        self.peaks = []
        self.hydrographs = []
        self.subareas = []
        self.storms = []

    # noinspection PyMethodMayBeStatic
    def tr(self, message):
        """Get the translation for a string using Qt translation API.

        We implement this ourselves since we do not inherit QObject.

        :param message: String for translation.
        :type message: str, QString

        :returns: Translated version of message.
        :rtype: QString
        """
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate("WBNMViewer", message)

    def add_action(
        self,
        icon_path,
        text,
        callback,
        enabled_flag=True,
        add_to_menu=True,
        add_to_toolbar=True,
        status_tip=None,
        whats_this=None,
        parent=None,
    ):
        """Add a toolbar icon to the toolbar.

        :param icon_path: Path to the icon for this action. Can be a resource
            path (e.g. ':/plugins/foo/bar.png') or a normal file system path.
        :type icon_path: str

        :param text: Text that should be shown in menu items for this action.
        :type text: str

        :param callback: Function to be called when the action is triggered.
        :type callback: function

        :param enabled_flag: A flag indicating if the action should be enabled
            by default. Defaults to True.
        :type enabled_flag: bool

        :param add_to_menu: Flag indicating whether the action should also
            be added to the menu. Defaults to True.
        :type add_to_menu: bool

        :param add_to_toolbar: Flag indicating whether the action should also
            be added to the toolbar. Defaults to True.
        :type add_to_toolbar: bool

        :param status_tip: Optional text to show in a popup when mouse pointer
            hovers over the action.
        :type status_tip: str

        :param parent: Parent widget for the new action. Defaults None.
        :type parent: QWidget

        :param whats_this: Optional text to show in the status bar when the
            mouse pointer hovers over the action.

        :returns: The action that was created. Note that the action is also
            added to self.actions list.
        :rtype: QAction
        """

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            self.toolbar.addAction(action)

        if add_to_menu:
            self.iface.addPluginToMenu(self.menu, action)

        self.actions.append(action)

        return action

    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""

        icon_path = ":/plugins/wbnm_viewer/icon.png"
        self.add_action(
            icon_path,
            text=self.tr(u"Open WBNM Viewer"),
            callback=self.run,
            parent=self.iface.mainWindow(),
        )

    # --------------------------------------------------------------------------

    def onClosePlugin(self):
        """Cleanup necessary items here when plugin dockwidget is closed"""

        # print "** CLOSING WBNMViewer"

        # disconnects
        self.dockwidget.closingPlugin.disconnect(self.onClosePlugin)

        # remove this statement if dockwidget is to remain
        # for reuse if plugin is reopened
        # Commented next statement since it causes QGIS crashe
        # when closing the docked window:
        # self.dockwidget = None

        self.pluginIsActive = False

    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""

        # print "** UNLOAD WBNMViewer"

        for action in self.actions:
            self.iface.removePluginMenu(self.tr(u"&WBNM Viewer"), action)
            self.iface.removeToolBarIcon(action)
        # remove the toolbar
        del self.toolbar

    # --------------------------------------------------------------------------

    def select_meta_file(self):
        filename, _filter = QFileDialog.getOpenFileName(
            self.dockwidget, "Select WBNM _Meta.out file", "", "*_Meta.out"
        )
        return filename

    def populate_lists(self):
        processed_peaks = self.peaks[0]

        self.subareas = processed_peaks.subarea.sort_values().unique()
        self.storms = processed_peaks["storm"].sort_values().unique()
        self.aeps = processed_peaks["aep"].sort_values().unique()
        self.durations = processed_peaks["dur"].sort_values().unique()

        self.dockwidget.subareasListWidget.addItems(self.subareas)
        self.dockwidget.subareas2ListWidget.addItems(self.subareas)
        self.dockwidget.subareas3ListWidget.addItems(self.subareas)
        self.dockwidget.stormsListWidget.addItems(self.storms)
        self.dockwidget.aepsListWidget.addItems(sorted(self.aeps, key=lambda x: float(x)))
        self.dockwidget.aeps2ListWidget.addItems(sorted(self.aeps, key=lambda x: float(x)))
        self.dockwidget.durationsListWidget.addItems(sorted(self.durations, key=lambda x: int(x)))

    def process_meta_file(self):
        meta_file = self.select_meta_file()
        if meta_file:
            # process peaks
            processed_peaks = get_peaks(meta_file)
            self.peaks.append(processed_peaks)
            self.populate_lists()

            self.iface.messageBar().pushSuccess(
                "Success", "Meta file processed successfully!"
            )

            # process hydrographs
            progressMessageBar = self.iface.messageBar().createMessage(
                "Processing hydrographs..."
            )
            progress = QProgressBar()
            progress.setMaximum(len(self.peaks[0]["storm"].sort_values().unique()))
            progress.setAlignment(Qt.AlignLeft | Qt.AlignVCenter)
            progressMessageBar.layout().addWidget(progress)
            self.iface.messageBar().pushWidget(progressMessageBar, Qgis.Info)

            processed_hydrographs = get_hydrographs(meta_file, progress=progress)
            self.hydrographs.append(processed_hydrographs)

            self.iface.messageBar().clearWidgets()
            self.iface.messageBar().pushSuccess(
                "Success", "Hydrographs processed successfully!"
            )

            model = DataFrameModel(self.peaks[0])
            self.dockwidget.dataTableView.setModel(model)

    def plot_hydrograph(self):
        subarea = self.dockwidget.subareasListWidget.selectedItems()[0].text()
        storm = self.dockwidget.stormsListWidget.selectedItems()[0].text()

        time = self.hydrographs[0][subarea][storm]["Time"]
        flow = self.hydrographs[0][subarea][storm]["Qout_OS"]
        fig = single_hydrograph(time, flow)
        update_plot(fig, self.dockwidget.chartWidget)

    def plot_box_whisker(self):
        subarea = self.dockwidget.subareas2ListWidget.selectedItems()[0].text()
        aep = self.dockwidget.aepsListWidget.selectedItems()[0].text()

        fig = box_plot(subarea, aep, self.peaks[0])
        update_plot(fig, self.dockwidget.boxWidget)

    def plot_ensembles(self):
        subarea = self.dockwidget.subareas3ListWidget.selectedItems()[0].text()
        aep = self.dockwidget.aeps2ListWidget.selectedItems()[0].text()
        duration = self.dockwidget.durationsListWidget.selectedItems()[0].text()

        storms = self.peaks[0].loc[
            (self.peaks[0].subarea == subarea) &
            (self.peaks[0].aep == aep) &
            (self.peaks[0].dur == duration)
        ].storm.unique()

        times = []
        flows = []
        for storm in storms:
            times.append(self.hydrographs[0][subarea][storm]["Time"])
            flows.append(self.hydrographs[0][subarea][storm]["Qout_OS"])

        fig = ensembles(times, flows, storms)
        update_plot(fig, self.dockwidget.ensembleWidget)

    def filter_storms(self):
        self.dockwidget.stormsListWidget.clear()
        filter_text = self.dockwidget.filterEdit.text()
        if filter_text == "":
            self.dockwidget.stormsListWidget.addItems(self.storms)
        else:
            filtered_storms = fnmatch.filter(self.storms, "*" + filter_text + "*")
            self.dockwidget.stormsListWidget.addItems(filtered_storms)

    def run(self):
        """Run method that loads and starts the plugin"""

        if not self.pluginIsActive:
            self.pluginIsActive = True

            # print "** STARTING WBNMViewer"

            # dockwidget may not exist if:
            #    first run of plugin
            #    removed on close (see self.onClosePlugin method)
            if self.dockwidget == None:
                # Create the dockwidget (after translation) and keep reference
                self.dockwidget = WBNMViewerDockWidget()
                self.dockwidget.plotButton.clicked.connect(self.plot_hydrograph)
                self.dockwidget.filterEdit.textChanged.connect(self.filter_storms)
                self.dockwidget.boxButton.clicked.connect(self.plot_box_whisker)
                self.dockwidget.ensembleButton.clicked.connect(self.plot_ensembles)

                # set up menubar
                self.window = QWidget()
                self.vbox = QVBoxLayout()
                self.window.setLayout(self.vbox)
                self.menuBar = QMenuBar()
                self.vbox.addWidget(self.menuBar)
                self.dockwidget.dockWidgetContents.layout().setSpacing(0)
                self.dockwidget.dockWidgetContents.layout().setMargin(0)
                self.dockwidget.dockWidgetContents.layout().setContentsMargins(
                    0, 0, 0, 0
                )
                self.dockwidget.dockWidgetContents.layout().insertWidget(0, self.window)

                fileMenu = self.menuBar.addMenu("&File")
                self.loadWBNMMetaFile = QAction(
                    "Load WBNM *_Meta.out file", self.window
                )
                fileMenu.addAction(self.loadWBNMMetaFile)
                self.loadWBNMMetaFile.triggered.connect(self.process_meta_file)

                # set up data tab

            # connect to provide cleanup on closing of dockwidget
            self.dockwidget.closingPlugin.connect(self.onClosePlugin)

            # show the dockwidget
            # TODO: fix to allow choice of dock location
            self.iface.addDockWidget(Qt.BottomDockWidgetArea, self.dockwidget)
            self.dockwidget.show()
